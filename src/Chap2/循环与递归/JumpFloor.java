package Chap2.循环与递归;
/**一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。
 *
 * */

public class JumpFloor {

    /**
     * 递归思路：
     *  特例分析：上第一级台阶 一种方法， 上第二级台阶 两种方法
     *  f(n) -> 青蛙上到n级台阶的跳法，则如何到f(n)呢？ 根据规则“一次跳一级台阶，或两级台阶” f(n) = f(n-1) + f(n-2)
     * */

    /**
     * 到达1级台阶只有1种可能，到达2级台阶有2种可能；可记为f(1) = 1,f(2) = 2
     * 要到达3级台阶，可以选择在1级台阶处起跳，也可以选择在2级台阶处起跳，所以只需到达1级台阶的可能情况+到达2级台阶的可能情况，即f(3) = f(2) +f(1)
     * 同理到达n级台阶，可以在n-1级台阶起跳，也可在n-2级台阶起跳，f(n) = f(n-2)+f(n-1)
     * 可以看做是斐波那契数列
     *
     * @param target 要到达的第n级台阶
     * @return 到达n级台阶总共的跳法可能
     */
    public static int jumpFloor(int target) {


        return target < 3 ? target : jumpFloor(target - 1) + jumpFloor(target - 2);

    }

    /**
     * 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。
     * 求该青蛙跳上一个n级的台阶总共有多少种跳法。
     *
     *      到达1级台阶只有1种可能，到达2级台阶有2种可能；可记为f(1) = 1,f(2) = 2
     *      要到达3级台阶，可以选择在1级台阶处起跳，也可以选择在2级台阶处起跳，也可直接跳到3级，所以只需到达1级台阶的可能情况 + 到达2级台阶的可能情况 + 1，即f(3) = f(2) +f(1) + 1
     *      同理到达n级台阶，可以在n-1级台阶起跳，可在n-2、n-1、n-3...级台阶起跳，f(n) = f(n-1)+f(n-2)+f(n-3)...+1,
     *       如果令f(n-n) = f(0) = 1,上式可表示为f(n) = f(n-1)+f(n-2)+f(n-3)...+f(n-n),
     *
     *      ！！还有种更好理解的思路：前n-1级台阶，每级台阶都有两种选择——跳到此或不跳到此，对于最后一级n级，没得选择，必须跳到这里
     *      所以有2^(n-1)种跳法
     *
     * @param target 要达到的第n阶台阶
     * @return  达到n级台阶总共的跳法可能
     * */
    public static int jumpFloorII(int target) {

        if (target <= 0)
            return 0;
        return (int) Math.pow(2, target - 1);


    }
}
